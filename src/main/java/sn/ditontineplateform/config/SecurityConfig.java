package sn.ditontineplateform.config;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;import org.springframework.security.config.core.GrantedAuthorityDefaults;import org.springframework.security.oauth2.jwt.JwtDecoder;import org.springframework.security.oauth2.jwt.JwtDecoders;import org.springframework.security.oauth2.server.resource.authentication.DelegatingJwtGrantedAuthoritiesConverter;import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationToken;import org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.util.matcher.AntPathRequestMatcher;import org.springframework.web.cors.CorsConfiguration;import org.springframework.web.cors.CorsConfigurationSource;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;import java.util.Arrays;import java.util.List;import static org.springframework.security.config.Customizer.withDefaults;@Configuration@EnableWebSecurity@EnableMethodSecurity(securedEnabled = true, jsr250Enabled = true)@Slf4jpublic class SecurityConfig {  private static final String[] WHITELIST = {    "/api-docs/**",    "/v1/auth/login",    "/v1/auth/refresh-token",    "/v1/auth/forgot-password",    "/v1/email/send",    "/v1/users",    "/swagger-ui/**",    "/swagger-ui.html",    "/actuator/prometheus",    "/actuator/health/**",    "/ws/**"  };  @Value("${keycloak-client.id}")  private String kcClientId;  @Value("${keycloak-client.issuer-url}")  private String tokenIssuerUrl;  @Value("${fayda-app.endpoints.frontend}")  private String frontEndUrl;  @Value("${spring.security.enabled}")  private boolean securityEnabled;  @Bean  public SecurityFilterChain securityFilterChain(      HttpSecurity http, CustomAuthenticationEntryPoint entryPoint, CustomAccessDenied accessDenied)      throws Exception {    if (securityEnabled) {      DelegatingJwtGrantedAuthoritiesConverter authoritiesConverter =          new DelegatingJwtGrantedAuthoritiesConverter(              new JwtGrantedAuthoritiesConverter(), new KeycloakJwtRolesConverter(kcClientId));      http.httpBasic(withDefaults())          .formLogin(withDefaults())          .csrf(AbstractHttpConfigurer::disable)          .cors(cors -> cors.configurationSource(corsConfigurationSource()))          .exceptionHandling(              exceptionHandling ->                  exceptionHandling                      .authenticationEntryPoint(entryPoint)                      .accessDeniedHandler(accessDenied))          .authorizeHttpRequests(              authorize -> {                authorize                    .requestMatchers(                        request -> {                          for (String pattern : WHITELIST) {                            if (new AntPathRequestMatcher(pattern).matches(request)) {                              return true;                            }                          }                          return false;                        })                    .permitAll();                authorize.anyRequest().authenticated();              })          .oauth2ResourceServer(              oauth2 ->                  oauth2.jwt(                      jwt ->                          jwt.jwtAuthenticationConverter(                              token ->                                  new JwtAuthenticationToken(                                      token, authoritiesConverter.convert(token)))));    } else {      http.authorizeHttpRequests(authorizeRequests -> authorizeRequests.anyRequest().permitAll())          .httpBasic(withDefaults())          .formLogin(withDefaults())          .csrf(AbstractHttpConfigurer::disable);    }    return http.build();  }  @Bean  public CorsConfigurationSource corsConfigurationSource() {    List<String> allowedOrigins = Arrays.stream(frontEndUrl.split(",")).map(String::trim).toList();    log.info("allowedOrigins {}", allowedOrigins);    CorsConfiguration configuration = new CorsConfiguration();    configuration.setAllowedOriginPatterns(allowedOrigins);    configuration.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "OPTIONS"));    configuration.setAllowedHeaders(        List.of("Authorization", "Cache-Control", "Content-Type", "X-JWT-Assertion"));    configuration.setAllowCredentials(true);    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();    source.registerCorsConfiguration("/**", configuration);    return source;  }  @Bean  public JwtDecoder jwtDecoder() {    log.info("tokenIssuerUrl {}", tokenIssuerUrl);    return JwtDecoders.fromIssuerLocation(tokenIssuerUrl);  }  @Bean  GrantedAuthorityDefaults grantedAuthorityDefaults() {    return new GrantedAuthorityDefaults("");  }}